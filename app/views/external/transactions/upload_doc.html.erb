<div class="card">
    <div class="card-header border-0 bg-transparent text-dark">
        <strong> Upload document</strong> - <%= @transaction.code %> (<%= @transaction.fw_name %>/<%= @transaction.fw_code %>)
    </div>

   <%= form_for @transaction, url: upload_doc_external_transaction_path(@transaction), html: { multipart: true, class: "with-parsley" } do |form| %>

        <div class="card-body">
                <%=render '/shared/all_flash' %>
                <%= render 'shared/all_validation_flash', { model_obj: @transaction } %>
            <div class="row">
            <div class="col-md-6">
                    <p>Please upload the following documents for verification. Please upload each document separately.</p>
                            <div class="" id="document_employer_list">
                                <ol class="ol-list-portal">
                                    <li>A copy of passport (front page)</li>
                                    <li>Latest Work permit/ Calling Visa for New Arrival / Immigration Approval</li>
                                    <li>Special Pass (if the Work Permit expired)</li>
                                    <li>Employer's Authorisation letter to perform registration  <%= link_to "Download", special_renewal_authorisation_letter_external_transaction_path(transaction_id: @transaction.id), target: :_blank, class: "btn btn-primary" %></li>
                                </ol>
                        </div>
                        <div class="" id="document_agency_list">
                                    <ol class="ol-list-portal">
                                        <li>A copy of passport (front page)</li>
                                        <li>Latest Work permit/ Calling Visa for New Arrival / Immigration Approval</li>
                                        <li>Special Pass (if the Work Permit expired)</li>
                                        <li>Individual - Employer NRIC or Passport<br>
                                            Company - Copy of Company Registration papers (SSM) </li>
                                <% if @transaction.order_item.order.category == "SPECIAL_RENEWAL_TRANSACTION_REGISTRATION" %>
                                        <li>Employer's Authorisation letter to perform registration <%= link_to "Download", special_renewal_authorisation_letter_external_transaction_path(transaction_id: @transaction.id), target: :_blank, class: "btn btn-primary" %></li>
                                <% else %>
                                        <li>Employerâ€™s Authorisation Letter to perform registration</li>
                                <% end %>
                                        </ol>
                        </div>
                    <p>Please upload only valid files (JPG, PNG, PDF). The total sizes of all files is limited to 10 MB. </p>
            </div>
            </div>
            <div class="row">
            <div class="col-md-6">
                    <div id="document-input-group" class="form-group">
                    <div class="input-group custom-input-group">
                        <div class="col-md-6 document-type">
                            <select class="col-md-12 form-control document-type-selector" name="transaction[uploads][][category]">
                                <option value="">Select option</option>
                                <% ForeignWorker::DOCUMENT_TYPES_AGENCY_WORKER.each do |index, document_type| %>
                                    <option value="<%= index %>"><%= document_type %></option>
                                <% end %>
                            </select>
                        </div>
                        <div class="custom-file col-md-6">
                            <input type="file" name="transaction[uploads][][documents]" class="custom-file-input"
                                onchange="validateFiles(this)" disabled>
                            <label class="custom-file-label"></label>
                        </div>
                        <div class="removal-button btn btn-danger font-weight-bold">X</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <h6>Total Uploaded Size: <span id="total_uploaded_label">0 MB</span></h6>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <%= form.button 'Add more documents', id: 'add_more_documents', class: 'btn btn-success float-right', type: 'button' %>
            </div>
        </div>
        <br>
        <div class="form-group row mt-6">
            <label class="col-form-label" style="margin-right:69px;">Pending Documents</label>
            <div class="col-md-7">
                <textarea class="form-control" readonly="readonly" data-parsley-uploaded-documents=""
                    data-parsley-validate-if-empty="" name="" id="worker_pending_document" rows="5"></textarea>
            </div>
        </div>
            <div class="card-footer border-0 bg-transparent text-dark text-right">
                <a class="btn btn-blue-portal" href="<%= external_transactions_path %>">Back</a>
                <%= button_tag 'Submit', type: 'submit', class: 'btn btn-success', data: { disable_with: "Submiting..."} %>
            </div>
    <% end %>
</div>


<% content_for :page_end_scripts do %>
    <script>

        $(document).ready(function() {
            // set upload category option
            setUploadCategoryOption();
            // re-set pending documents
            syncPendingDocuments();
        });
        function setUploadCategoryOption() {

            <% if ["Employer"].include?(current_user.userable_type) %>
                var employer_type='employer';
                $('#document_employer_list').show();
                $('#document_agency_list').hide();
            <% end %>
            <% if ["Agency"].include?(current_user.userable_type) %>
                var employer_type= 'agency';
                $('#document_agency_list').show();
                $('#document_employer_list').hide();
            <% end %>

            $('.document-type-selector').each(function (index, obj) {

                // clear existing option-
                $(obj).empty();
                // append new option based on the employer type
                $(obj).append(new Option('Select option', ''));
                var needed_validate_documents = required_documents[employer_type];
                needed_validate_documents.forEach(function (document_type) {

                    var document_type_label = document_types[document_type];
                    $(obj).append(new Option(document_type_label, document_type));
                });

            });
            // clone select option after updating the option
            cloneSelect(employer_type);
        }

        function cloneSelect(employer_type) {
            window['cloned_' + employer_type + '_select'] = $('.custom-input-group:first').clone(true, true);
        }
        // re-sync pending documents

        function syncPendingDocuments() {

            var pending_uploads = getPendingUploads();

            if (!pending_uploads) {
                return false;
            }

            setPendingDocuments(pending_uploads);
        }

        function getPendingUploads() {

            <% if ["Employer"].include?(current_user.userable_type) %>
                var employer_type='employer';
                $('#document_employer_list').show();
                $('#document_agency_list').hide();
            <% end %>
            <% if ["Agency"].include?(current_user.userable_type) %>
                var employer_type= 'agency';
                $('#document_agency_list').show();
                $('#document_employer_list').hide();
            <% end %>

            var needed_validate_documents = required_documents[employer_type];

            // var pending_uploads = needed_validate_documents;
            var pending_uploads = needed_validate_documents.slice();

            // console.log(needed_validate_documents);

            $('.custom-input-group').each(function (index, obj) {

                var document_type = $(obj).find('.document-type-selector').val();
                var selected_file = $(obj).find('.custom-file-input').val();
                // check if this document needed by current employer type
                // if yes we need to check file exist
                if (needed_validate_documents.includes(document_type)) {
                    // if valid upload
                    if (selected_file) {
                        // remove from pending uploads
                        for( var i = 0; i < pending_uploads.length; i++){
                            if ( pending_uploads[i] === document_type) {
                                pending_uploads.splice(i, 1);
                            }
                        }
                    }
                }

            });
            return pending_uploads;
        }

        function setPendingDocuments(pending_uploads) {

            var pending_list = '';

            pending_uploads.forEach(function (document_type) {

                var document_type_label = document_types[document_type];

                pending_list = pending_list + document_type_label + '\n';
            });

            var pending_documents = $("#worker_pending_document");
            // reset pending list

            pending_documents.val('');
            pending_documents.val(pending_documents.val() + pending_list);
        }

        var document_types = <%= ForeignWorker::DOCUMENT_TYPES_AGENCY_WORKER.to_json.html_safe %>;

        var required_documents = {
                agency: [
                    "PASSPORT",
                    "WORKING_PERMIT_CALLING_VISA",
                    "EMPLOYERNRIC_PASSPORT",
                    "AUTHORISATION_LETTER"

                ],
                employer: [
                    "PASSPORT",
                    "WORKING_PERMIT_CALLING_VISA",
                    "AUTHORISATION_LETTER"
                ]
        };
        window
            .Parsley
            .addValidator('uploadedDocuments', {
                requirementType: 'string',
                validateString: function (value, requirement) {

                    var pending_uploads = getPendingUploads();

                    // if there is still pending documents, return false

                    if (pending_uploads.length > 0) {

                        // append to pending list

                        setPendingDocuments(pending_uploads);

                        // return false validation of there is documents pending

                        return false;
                    }

                    return true;
                },
                messages: {
                    en: 'You must upload all the required documents',
                }
            });

            $("#form").parsley({
                errorClass: 'is-invalid text-danger',
                errorsWrapper: '<div class="invalid-feedback"></div>',
                errorTemplate: '<span></span>',
                trigger: 'change'
            });

            $('.custom-file-input').change(function() {
                let filePath = $(this).val().split("\\")
                let fileName = filePath[filePath.length - 1]
                if (fileName != "")
                    $(this).siblings('.custom-file-label').html(fileName)
                else
                    $(this).siblings('.custom-file-label').html("")
            });
            // Function to duplicate document fields
            // define default clone

            var cloned_company_select = null;
            var cloned_individual_select = null;

            function getActiveEmployerType() {

               <% if ["Employer"].include?(current_user.userable_type) %>
                    return 'employer';
                <% end %>
                <% if ["Agency"].include?(current_user.userable_type) %>
                    return 'agency';
                <% end %>
                return 'null';
            }
            // if not yet select employer type but click Add documents
            if (!getActiveEmployerType()) {
                var clonedAttachmentInput = $('.custom-input-group:first').clone(true, true);
            }

            $('#add_more_documents').click(() => {
                var employer_type = getActiveEmployerType();

                if (getActiveEmployerType()) {
                    clonedAttachmentInput = window['cloned_' + employer_type + '_select'];
                }

                clonedAttachmentInput
                    .clone(true, true)
                    .appendTo("#document-input-group")
                    .addClass('mt-1')
                    .find(".custom-file-input")
                    .val("")
                    .attr("disabled", "disabled")
                $('.custom-input-group:last')
                    .find(".custom-file-label").html("Choose file")
                bindLastDocumentTypeSelectorAndFileSelector();
                removeAttachmentField('.removal-button:last');
                // $('#no-input-placeholder').hide();
            });

            removeAttachmentField('.removal-button:last');

        function removeAttachmentField(field) {
        $(field).click(function() {
            $(this).closest('.custom-input-group').remove();

             syncPendingDocuments();
        });
        }
            bindLastDocumentTypeSelectorAndFileSelector();

        // Function to re-enable form input after selecting dom type & to set file name after selecting in input
        function bindLastDocumentTypeSelectorAndFileSelector() {
            $('.custom-file-input:last').change(function() {
                let filePath = $(this).val().split("\\")
                let fileName = filePath[filePath.length - 1]
                if (fileName != "")
                    $(this).siblings('.custom-file-label').html(fileName)
                else
                    $(this).siblings('.custom-file-label').html("Choose file")
            });

            $('.document-type-selector:last').change(function() {
                let selectedValue = $("option:selected", this).val();
                inputField = $(this).closest('.custom-input-group').find(".custom-file input");

                if (selectedValue.length > 0) {
                    inputField.removeAttr('disabled');
                } else {
                    inputField.attr("disabled", "disabled")
                }
            });
        }

        $('.set-deletion').click(function() {
            filenames = $(this).closest('tr').find('.filenames');
            filenames.toggleClass('text-decoration-line-through');
            text = $(this).hasClass('btn-danger') ? 'Undo Remove' : 'Remove';
            $(this).text(text).toggleClass('btn-danger btn-primary');

            ids = $('.set-deletion.btn-primary').map(function() {
                return $(this).attr('data-id');
            }).get().join(',');

            $('#remove_uploaded_file').val(ids);
        });


         function validateFiles(inputFile) {

            var maxExceededMessage = "This file exceeds the maximum allowed file size (10 MB)";
            var extErrorMessage = "Only image file with extension: .jpg, .jpeg, .gif or .png is allowed";
            var allowedExtension = ["jpg", "jpeg", "png", "pdf"];

            var extName;
            var maxFileSize = <%= 10.megabytes %>;
            var sizeExceeded = false;
            var extError = false;

            var total_uploaded_size = getTotalUploadedSize();

            var file = inputFile.files[0];

            var file_size = file.size;

            // check if single file exceed max file size

            if (file_size && maxFileSize && file_size > parseInt(maxFileSize)) {
                sizeExceeded = true;
            };

            // check if combine with previous file will exceed max file size

            var combine_size = (file_size + total_uploaded_size) - file_size;

            if (combine_size > parseInt(maxFileSize)) {
                sizeExceeded = true;
            };

            extName = file.name.split('.').pop().toLowerCase();

            if ($.inArray(extName, allowedExtension) == -1) { extError = true; };

            if (sizeExceeded) {
                window.alert(maxExceededMessage);
                $(inputFile).val('');
            }

            if (extError) {
                window.alert(extErrorMessage);
                $(inputFile).val('');
            }

            // set inline size

            var file_size_label = getUploadSizeLabel(file_size);

            $(inputFile).closest('div').next().find('.inline-file-size').val(file_size_label);

            // set label

            setTotalUploadLabel();

            // sync pending documents

            syncPendingDocuments();
        }


        function getTotalUploadedSize() {

            var total_uploaded_size = 0;

            $('.custom-file-input').each(function (index, obj) {

                if (obj.files.length > 0) {
                    total_uploaded_size = total_uploaded_size + parseFloat(obj.files[0].size);
                }

            });

            return total_uploaded_size;
        }

        function setTotalUploadLabel() {

            var total_uploaded_size = getTotalUploadedSize();

            var total_uploaded_label =  getUploadSizeLabel(total_uploaded_size);

            $("#total_uploaded_label").text(total_uploaded_label);
        }

        function getUploadSizeLabel(upload_size) {

            var total_mb = upload_size / 1000000;

            total_mb = total_mb.toFixed(2);

            var upload_size_label = total_mb + ' MB';

            return upload_size_label;
        }
    </script>
    <% end %>