<div class="card-body">

    <%=render "/shared/all_flash" %>
    <%= render 'shared/all_validation_flash', { model_obj: @user } %>

    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <%= form.label :code, "User ID", class: 'required' %>
                <%= form.text_field :code, class: 'form-control', required: true %>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <%= form.label :title_id, "Title" %>
                <%= form.select :title_id, options_from_collection_for_select(Title.order(:name).all, :id, :name, form.object.title_id), {include_blank: form_select_option_text}, {class: 'form-control select2'} %>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <%= form.label :name, class: 'required' %>
                <%= form.text_field :name, class: 'form-control', required: true, data: { parsley_maxlength: "150", parsley_maxlength_message: "Maximum length of 150 characters", parsley_pattern: "^[a-zA-Z0-9].*", parsley_pattern_message: "Name must not begin with a special characters" } %>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <%= form.label :email, class: 'required' %>
                <%= form.text_field :email, class: 'form-control no-uppercase', required: true, data: { parsley_maxlength: "100", parsley_maxlength_message: "Maximum length of 100 characters" }, readonly: ['Employer','Doctor','XrayFacility','Laboratory','Radiologist'].include?(@user.userable_type) %>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <%= form.label :username, class: 'required' %>
                <%= form.text_field :username, class: 'form-control no-uppercase', required: true %>
            </div>
        </div>
    </div>

    <% if has_permission? "RESET_PASSWORD_USER" %>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <%= form.label :password %>
                    <%= form.text_field :password, class: 'form-control no-uppercase' %>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <%= form.label :password_confirmation, "Password Confirmation" %>
                    <%= form.text_field :password_confirmation, class: 'form-control no-uppercase' %>
                </div>
            </div>
        </div>
    <% end %>

    <div class="row">
        <div class="col-md-6">
            <button id="generate_password" type="button" class="btn btn-sm btn-primary">Generate Password</button>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <% field_id = generate_field_id(form, :role_id) %>
                <%= form.label :role_id, class: 'required' %>
                <%= form.select :role_id, options_from_collection_for_select(Role.order(:name).all, :id, :name, form.object.role_id), {include_blank: form_select_option_text}, {class: 'form-control select2', required: true, data: { parsley_errors_container: "#select2_parsley_error__#{ field_id }", parsley_class_handler: ".select2-selection--single[aria-labelledby=\"select2-#{ field_id }-container\"]", parsley_group: field_id }} %>
                <div id="select2_parsley_error__<%= field_id %>"></div>
            </div>
        </div>
    </div>

    <%# userable_types = params[:action] == 'new' ? User::USERABLE_TYPES_NEW.invert : (@user.userable_type != 'Organization' ? { @user.userable_type => @user.userable_type.constantize.model_name.human.upcase}.invert : User::USERABLE_TYPES_NEW.invert ) %>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <% field_id = generate_field_id(form, :userable_type) %>
                <%= form.label :userable_type, "Userable Type", class: 'required' %>
                <%= form.select :userable_type, options_for_select(@userable_types.invert, form.object.userable_type), {include_blank: form_select_option_text}, {class: 'form-control select2', required: true, data: { parsley_errors_container: "#select2_parsley_error__#{ field_id }", parsley_class_handler: ".select2-selection--single[aria-labelledby=\"select2-#{ field_id }-container\"]", parsley_group: field_id }} %>
                <div id="select2_parsley_error__<%= field_id %>"></div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <% field_id = generate_field_id(form, :userable_id) %>
                <%= form.label :userable_id, class: 'required' %>
                <%= form.select :userable_id, options_from_collection_for_select(@userable_ids, :id, :name, form.object.userable_id), {include_blank: form_select_option_text}, {class: 'form-control select2', required: true, data: { parsley_errors_container: "#select2_parsley_error__#{ field_id }", parsley_class_handler: ".select2-selection--single[aria-labelledby=\"select2-#{ field_id }-container\"]", parsley_group: field_id }} %>
                <div id="select2_parsley_error__<%= field_id %>"></div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <%= form.label :session_limitable_disabled, "Allow Multiple Logins" %><br>

                <%= form.radio_button :session_limitable_disabled, true %><label class="ml-2" for="user_session_limitable_disabled_true">Yes</span>
                <%= form.radio_button :session_limitable_disabled, false, class: "ml-4" %><label class="ml-2" for="user_session_limitable_disabled_false">No</span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <%= form.label :status, class: "required" %>
                <% field_id = generate_field_id(form, :status) %>
                <%= form.select :status, options_for_select(User::STATUSES.invert, form.object.status), {include_blank: form_select_option_text}, {class: 'form-control select2', required: true, data: { parsley_errors_container: "#select2_parsley_error__#{ field_id }", parsley_class_handler: ".select2-selection--single[aria-labelledby=\"select2-#{ field_id }-container\"]", parsley_group: field_id }} %>
                <div id="select2_parsley_error__<%= field_id %>"></div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <%= form.label :designation %><br>
                <%= form.text_field :designation, class: 'form-control' %>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <%= form.label :comment, 'Remarks' %><br>
                <%= form.text_area :comment, class: 'form-control' %>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <div class="row">
                <label class="col-md-9 col-sm-6">Permissions</label>
                <input type="text" class="form-control col-md-3 col-sm-6" placeholder="Filter permission" id="user-permission-filter">
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <% Role::MODULE_PERMISSIONS.each.with_index do |perm, idx| %>
                    <div class="col-lg-6 col-md-6 permission-filterable" data-keywords=" <%= perm[1].join(' ').gsub('_', ' ') %> ">
                        <div class="card">
                            <div class="card-header">
                                <label><input type="checkbox" class="permission-module-title"<%= ' checked' if @user.has_all_permission? perm[1] %>> <%= perm[0].upcase %></label>
                            </div>
                            <div class="card-body">
                                <% perm[1].each do |permission| %>
                                    <div class="permission-filterable" data-keywords=" <%= permission.gsub('_', ' ') %> ">
                                        <div class="form-check checkbox">
                                            <input type="checkbox" class="form-check-label" name="user[permissions][]" id="user_permissions_<%= permission.downcase %>" value="<%= permission %>"<%= ' checked' if @user.current_permissions.include? permission %>>
                                            <label class="form-check-label" for="user_permissions_<%= permission.downcase %>"><%= permission %></label>
                                        </div>
                                    </div>
                                <% end %>
                            </div>
                        </div>
                    </div>
                <% end %>
            </div>
        </div>
    </div>

</div>

<div class="card-footer">

    <div class="text-right">
        <%=raw edit_back_button(internal_user_setups_path) %>
        <%=raw edit_save_button() %>
        <%=raw edit_save_continue_button() %>
    </div>

</div>

<% content_for :page_end_scripts do %>
<script>

$('#user-permission-filter').keyup(function () {
    var keywords = this.value;
    if (keywords.length == 0) {
        $('.permission-filterable').show();
        return;
    }
    $('.permission-filterable').hide();
    var selector = '.permission-filterable';
    var vals = this.value.toUpperCase().split(/[\s_]/);
    $.each(vals, function (index, keyword) {
        if (keyword.length > 0) {
            selector += "[data-keywords*='" + keyword + "']";
        }
    });
    $(selector).show();
});

$('.permission-module-title').change(function () {
    var toggle = this;
    $(this).parent().parent().siblings('.card-body').find(':input').each(function (idx, inp) {
        $(this).prop('checked', toggle.checked);
    });
});

function generatePassword() {
    var eachLength = <%= PasswordPolicy.maximum(:minimum_length).fdiv(4).ceil %>;

    var ret = '';
    [
        "abcdefghijklmnopqrstuvwxyz",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "0123456789",
        "?*#!@$%^&*-"
    ].forEach(function (charset) {
        ret += randomString(eachLength, charset);
    });

    return shuffle(ret);
}

if(`<%= params[:action] %>` == 'new'){
    load_userable_id();
}

$('#generate_password').click(function () {
    var password = generatePassword();
    $('#user_password').val(password);
    $('#user_password').trigger('change');
    $('#user_password_confirmation').val(password);
})

$('#user_password').change(function (e) {
    if ($(e.target).val().length > 0) {
        $('#user_password_confirmation').attr('required', 'required') && $('label[for="user_password_confirmation"]').addClass("required");
    } else {
        $('#user_password_confirmation').attr('required', false) && $('label[for="user_password_confirmation"]').removeClass("required");
    }
});

$('#user_userable_type').change(function () {
    $('#user_userable_id').html('<option value><%= form_select_option_text %></option>');
    load_userable_id();
});

function load_userable_id() {
    userable_type = $('#user_userable_type option:selected').val();
    if (userable_type.length < 1) {
        return;
    }
    $.ajax({
        url: '/user_setups/load_userable_ids/' + userable_type + '.json',
        dataType: 'json',
        type: "GET",
    }).done(function (data) {
        $('#user_userable_id').html('<option value><%= form_select_option_text %></option>');
        $.each(data.results, function (idx, userable_id) {
            $('#user_userable_id').append($("<option />").val(userable_id.id).text(userable_id.text));
            $("#user_userable_id").val(userable_id).select2();
        });
    });
}

</script>
<% end %>